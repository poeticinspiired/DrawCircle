
The purpose of this: The purpose of the "DrawCircleAssignment7" in JavaFX is to provide a comprehensive learning experience in several key areas of software development, particularly focusing on graphical user interface (GUI) design, event-driven programming, and basic graphics programming in Java.

“Statement of Authorship: Abdi Sidnoor, certify that this material is my original work.
No other person's work has been used without acknowledgment, and I have not made my work available to anyone else”. */

        import javafx.application.Application;
        import javafx.event.ActionEvent;
        import javafx.scene.Scene;
        import javafx.scene.canvas.Canvas;
        import javafx.scene.canvas.GraphicsContext;
        import javafx.scene.control.Button;
        import javafx.scene.control.Label;
        import javafx.scene.control.TextField;
        import javafx.scene.layout.Pane;
        import javafx.scene.paint.Color;
        import javafx.stage.Stage;

public class DrawCircleAssignment7 extends Application {

    private static final int WINDOW_SIZE = 400;
    private static final Color BACKGROUND_COLOR = Color.LIGHTBLUE;
    private static final Color CIRCLE_FILL_COLOR = Color.GREEN;
    private static final Color CIRCLE_STROKE_COLOR = Color.DARKGREEN;
    private static final int CIRCLE_STROKE_WIDTH = 5;

    @Override
    public void start(Stage stage) {
        Pane root = new Pane();
        Scene scene = new Scene(root, WINDOW_SIZE, WINDOW_SIZE, BACKGROUND_COLOR);
        Canvas canvas = new Canvas(WINDOW_SIZE, WINDOW_SIZE);
        GraphicsContext gc = canvas.getGraphicsContext2D();

        Label radiusLabel = new Label("Radius:");
        radiusLabel.setLayoutX(50);
        radiusLabel.setLayoutY(350);

        TextField radiusInput = new TextField();
        radiusInput.setLayoutX(100);
        radiusInput.setLayoutY(345);
        radiusInput.setPrefWidth(50);

        Button drawButton = new Button("Draw Circle");
        drawButton.setLayoutX(160);
        drawButton.setLayoutY(345);

        drawButton.setOnAction((ActionEvent e) -> {
            drawCircle(gc, radiusInput.getText());
        });

        root.getChildren().addAll(canvas, radiusLabel, radiusInput, drawButton);

        stage.setTitle("Draw Circle");
        stage.setScene(scene);
        stage.show();
    }

    private void drawCircle(GraphicsContext gc, String radiusStr) {
        gc.clearRect(0, 0, WINDOW_SIZE, WINDOW_SIZE);

        try {
            double radius = Double.parseDouble(radiusStr);
            double centerX = WINDOW_SIZE / 2.0;
            double centerY = WINDOW_SIZE / 2.0;

            gc.setFill(CIRCLE_FILL_COLOR);
            gc.setStroke(CIRCLE_STROKE_COLOR);
            gc.setLineWidth(CIRCLE_STROKE_WIDTH);

            gc.fillOval(centerX - radius, centerY - radius, radius * 2, radius * 2);
            gc.strokeOval(centerX - radius, centerY - radius, radius * 2, radius * 2);
        } catch (NumberFormatException ex) {
            // Handle invalid radius input, for example, show an alert or print to console.
            System.out.println("Invalid radius input");
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}


 

 
